<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Tom's Hugo Site</title><link>https://lopan455.github.io/posts/</link><description>Recent content in Posts on Tom's Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Jul 2021 07:02:47 -0500</lastBuildDate><atom:link href="https://lopan455.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Working with WebClient</title><link>https://lopan455.github.io/posts/webflux/working-with-webclient/</link><pubDate>Tue, 13 Jul 2021 07:02:47 -0500</pubDate><guid>https://lopan455.github.io/posts/webflux/working-with-webclient/</guid><description>WebClient is the reactive HTTP client that comes with the Spring Boot Reactive Web. Like many Webflux components there is a bit of a learning curve to configuring and using the API.
Let&amp;rsquo;s assume we have a WebClient instance configured as a clean and injected into a service class.
We can configure an instance of WebClient with a minimal configuration as a Spring Bean like this:
@Configuration class MarvelApiConfig( @Value(&amp;#34;\${marvel-api.</description></item><item><title>Basic Spring Boot App</title><link>https://lopan455.github.io/posts/a-single-post/</link><pubDate>Tue, 13 Jul 2021 07:01:01 -0500</pubDate><guid>https://lopan455.github.io/posts/a-single-post/</guid><description>This is where I&amp;rsquo;d go into an overview of the basic architecture of our boilerplate Spring Boot app</description></item></channel></rss>