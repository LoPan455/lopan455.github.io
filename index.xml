<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Uber Home Page; The mother of all pages on Tom's Hugo Site</title><link>https://lopan455.github.io/</link><description>Recent content in The Uber Home Page; The mother of all pages on Tom's Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Jul 2021 06:40:16 -0500</lastBuildDate><atom:link href="https://lopan455.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Marvelous</title><link>https://lopan455.github.io/projects/marvelous/</link><pubDate>Sat, 14 Aug 2021 10:23:08 -0500</pubDate><guid>https://lopan455.github.io/projects/marvelous/</guid><description>The Origin Story of Marvelous Marvelous is Spring Boot / Java application that is designed to interact with the Marvel comic book API.
I started working on this app back in the Fall of 2018, when I first joined Target Corp as an Engineer. The team I joined maintained a collection of Spring Boot based services, mostly written in Groovy. At that point in my career I had been working on a tech stack that included PHP, AngularJS, MySQL and Apache.</description></item><item><title>Working with WebClient</title><link>https://lopan455.github.io/posts/webflux/working-with-webclient/</link><pubDate>Tue, 13 Jul 2021 07:02:47 -0500</pubDate><guid>https://lopan455.github.io/posts/webflux/working-with-webclient/</guid><description>WebClient is the reactive HTTP client that comes with the Spring Boot Reactive Web. Like many Webflux components there is a bit of a learning curve to configuring and using the API.
Let&amp;rsquo;s assume we have a WebClient instance configured as a clean and injected into a service class.
We can configure an instance of WebClient with a minimal configuration as a Spring Bean like this:
@Configuration class MarvelApiConfig( @Value(&amp;#34;\${marvel-api.</description></item><item><title>Basic Spring Boot App</title><link>https://lopan455.github.io/posts/a-single-post/</link><pubDate>Tue, 13 Jul 2021 07:01:01 -0500</pubDate><guid>https://lopan455.github.io/posts/a-single-post/</guid><description>This is where I&amp;rsquo;d go into an overview of the basic architecture of our boilerplate Spring Boot app</description></item><item><title>About Me</title><link>https://lopan455.github.io/about/why-i-created-this-blog/</link><pubDate>Tue, 13 Jul 2021 06:51:31 -0500</pubDate><guid>https://lopan455.github.io/about/why-i-created-this-blog/</guid><description>Who Is Thomas Johander? I&amp;rsquo;ve had the title &amp;ldquo;Engineer&amp;rdquo; during most of my professional life. It has never really fit, though. &amp;ldquo;Explorer&amp;rdquo; rings much more true if I was to describe my relationship to technology. From my first experiences as a kid staring at the inky black depths of an MS-DOS command prompt, to my attempts at making enterprise software function inside a literal jungle of data, I&amp;rsquo;ve always been most fascinated with answering the question &amp;ldquo;I wonder if I can&amp;hellip;.</description></item></channel></rss>